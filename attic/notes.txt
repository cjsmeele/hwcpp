C++ 17 : header only!
C++17

arm: http://gnutoolchains.com/arm-eabi/
avr: avr http://blog.zakkemble.co.uk/avr-gcc-builds/
win: http://www.msys2.org (64 bits)
beter: https://mingw-w64.org/doku.php/download/mingw-builds

larger->small 
no heap, cooperative rtos, calculated stack size(s)
catch2 for tests
pin in, out, in/out, oc
port idem, max pins = max unsigned size
all/bundle
mux/select
demos: blink, kitt, circles, bouncing ball
time!!
fstring
interfaces: temperature, pressure, color, a/d, d/a, distance, h-bridge, pwm, qudrature
bb i2c, spi, uart
chips etc: nrf24, pcf8574, srf04, ir-distance, d
LCDs/ oleds
div. sensors
boost::units
stream/channel - interface, name collision with rtos?
window, coordinate, color, line, box, circle
font, console
rtos inbouwen

template< class T >
class input:

template< class T >
class output:

// dit wordt lastig voor poorten, moet dan al oc zijn
template< class T >
class oc:

// een write flusht alleen als er al geschreven is
// hoe zit dat voor een read??
// kan je iets deleten dat er misschien is?

template< class T >
class buffer: public T {
   static const buffered = false;
private:
   static T::result_type buffer;
   static bool dirty;
   static bool fresh;
public:
   if not T::buffered, has set -> set, flush
   if has get -> get, refresh
   if has direction set -> direction set
}

template< class T >
class transparent: public T {
   static const buffered = false;
   static T::result_type buffer;
public:
   if has flush -> set, direction_set
   if has refresh -> get, direction_set
   if has direction set ->
}

template< class T >
class invert: public T {
public:
   if has set -> set
   if has get -> get
}

template< class p >
void blink(){
   using pin = output< transparent< p > >;
   for(;;){
      ...
   }
}